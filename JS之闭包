    这几天看JS书籍的时候，看到了闭包的概念，不明白这个闭包到底用来干什么的，也想深入了解一下。我就去博客上看，知乎上看等等，
总感觉差点什么，我就想结合一个小案例来谈一下我对闭包的理解。

 1. 案例是这样的，我想实现一个计数器的效果，执行一次函数，就会加数值1，初始代码如下
  
      var count=0;
      function add(){
         count += 1;
      }
    
 2. 那这就实现了，当我每次执行这个函数的时候，数值就会往上加，从1，2，3.....
  但是我不想要这个全局变量count;
  
      function add(){
         var count=0;
         count += 1;
      }
      add();
  
  3.  这次当我执行这个函数的时候，发现不对呀，每次结果都是1，what?
    
    这就引申到了作用域的概念，其实我每次执行完这个函数，这个函数就被销毁了，那下次再用的话就又从零开始啦!简直是白手起家一次又一次
    
    所以我想了个办法，我往里面加了个函数

      function add(){
        var count=0;
          function auto(){
            count += 1;
            return count;
            }
      }
      auto();
      
  4.  我尝试调用里面的auto函数，不过不好意思，我调用不了，因为auto是局部函数，只有add函数才能用它（人家亲儿子怎么能听你话呢？）
作为隔壁老王的我就不开心了。所以我直接调add(你家儿子我用不了，我就直接用你)。OK了，大功告成！

      function add(){
        var count=0;
          function auto(){
            count += 1;
            return count;
            }
      }
      var newAdd=add();
      newAdd();// 或者直接add();
      
    原来闭包就是这样。其实闭包在实际开发中用的还是挺多的，但是后续会引发内存的问题，还是需要谨慎滴。

    
   
    

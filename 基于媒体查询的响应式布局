
    关于响应式布局，前几天用bootstrap简单做了一个，但是发现还可以用media进行响应式设计，于是我这几天学习了一下，并简单的总结一下；

    要想做到适应不同屏幕尺寸的布局，就用到了media这个属性，也就是媒体查询；

    关于媒体查询，可以根据不同的设备输出不同的样式，比如sreen(屏幕)、print(打印机)，当然也可以用all，来包含所有类型；

    有了这些设备，可以根据不同的需求选择不同的筛选条件；比如only、and、not、or，根据字面意思很容易理解，选择筛选而已；

    基于以上的选择性，我们可以设置meta标签了，首先要选择视口；说到视口，一般都用viewport，也就是理想视口；还有另外两个视口，分别为
布局视口layout viewport;  视觉视口visual viewport;

    布局视口可以理解为一个中介，在网页上渲染的页面，默认先会以这个视口大小来进行显示，但是这个视口不会被用户看到，然后根据比例缩放，
映射到用户的设备上，也就是采用了视觉视口这个概念。也就是用户能够看到的视口区域；

    而理想视口就是所说的屏幕分辨率，一般我们在meta标签内都会写到width=device-width；就代表我们希望在屏幕上显示经过缩放计算后得到的布局
视口内的内容；（这些概念是我的理解）

   通过标签来告诉浏览器我们要做什么了，接下来就该真正的进行样式布局了。

   定义完某个尺寸下css的样式后，如果希望在不同的屏幕尺寸下，显示不同的排列方式，可以在css中庸@media这个属性，来设置在某个宽度间的样式，
这就很简单了；

    但是会有一些需要注意的地方，就是布局的单位选择；一般在写死页面的时候，我都会采用px这个绝对单位，因为可以完美控制像素，但是响应式布局
还是用rem这个单位是不错的，rem就是根据根节点的字体大小来设置的。

   默认浏览器的字体大小都是16px，而我用1rem就表示了16px。使用rem的好处是，我只需要页面html的字体大小，整个页面都会根据比例来进行调整，很方便；

    还有一个概念就是响应图片，当页面宽度不断调整，但是图片一直在用一个，会引起图片模糊的不好的效果，所以就引入了响应图片的这个概念，希望我的
图片在不同的屏幕尺寸下显示不同分辨率的图片。

    第一个就可以用js来动态获取屏幕的宽度，来进行图片的加载路径；

    第二个采用srcset这个属性，它可以把路径都加载进去，并跟这属性，来告诉浏览器当屏幕属于什么范围的时候采用哪个路径的图片，也是很方便

    第三个就是用picture标签，有点类似H5的video，在标签内根据媒体查询加载不同的source图片

    最后就是有SVG，这个是可伸缩的矢量图形，不会存在不同尺寸模糊的现象，而且SVG的兼容性也很好

    也上就是我对响应式的理解和总结，后续接触更多，我会逐步完善
